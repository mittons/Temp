on:
  push:
    branches:
      - staging

jobs:
  test-version-refs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Push to main/Main
      - name: Push to main 
        if: success()
        run: |
          # Configure git

          latest_commit_message=$(git log -1 --pretty=%B)
          commit_message="MERGE FROM STAGING: $latest_commit_message"

          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config pull.rebase false  # Explicitly set the merge strategy for pull
     
          #git remote add gh-token "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"          
          
          # Fetch all branches aaaa
          git fetch --all

          # Check if the 'staging' branch exists and switch to it, otherwise create it
          if git show-ref --verify --quiet "refs/heads/staging"; then
            git checkout staging
          else
            git checkout -b staging origin/staging
          fi

          # Merge changes from main into staging, resolving conflicts by favoring changes from main
          git pull origin main --allow-unrelated-histories -X ours

          # Add all changes (including file renames)
          git add -A

          # Commit changes
          latest_commit_message=$(git log -1 --pretty=%B)
          commit_message="MERGE FROM STAGING: $latest_commit_message"
          git commit -m "$commit_message"

          echo "2"

          # Push the changes to main
          git checkout main
          git merge staging
          git push origin main

          # Switch back to staging and sync with main
          git checkout staging
          git merge main
          git push origin staging